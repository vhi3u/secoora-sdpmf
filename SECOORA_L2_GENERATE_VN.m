% L2 data processing for SECOORA gliders
% Victor Hieu Nguyen 
% UNC-Chapel Hill

clc
clear;

% load CTD data

gliderName = 'angus';
dateTag = '2021_11';

ctd = load(sprintf('%s_%s_CTD_L1.mat', gliderName, dateTag));
eco = load(sprintf('%s_%s_ECO_L1.mat', gliderName, dateTag));
% do = load(sprintf('%s_%s_DO_L1.mat', gliderName, dateTag));

% check to make sure CTD and ECO are for the same glider and deployment.

if ~(strcmp(ctd.config.glider_name, eco.config.glider_name) && ...
      strcmp(ctd.config.date_tag,   eco.config.date_tag))
    error('CTD/ECO/DO files not for same deployment/glider')
end

outdir = sprintf('/Users/victornguyen/Documents/MATLAB/dataSECOORA/level2/%s/', ctd.config.glider_name);

fprintf('Starting L2 processing... \nGlider name: %s \nGen: %s \nisPumped = %i\n', ...
    ctd.config.glider_name, ctd.config.gen, ctd.config.isPumped);

% create grid (use ctd)
dt = 1/24;
dn_vec = ceil(min(eco.ptime_datenum)):dt:max(eco.ptime_datenum);
dz = 1;
zmax = 100; % vertical grid size
z_vec = 0:dz:zmax; % z vector
z_vec(1) = -eps; % bin edge includes zero; use eps. 

% bin center
dn_mean = (dn_vec(2:end) + dn_vec(1:end-1)) / 2;
z_mean = (z_vec(2:end) + z_vec(1:end-1)) / 2; 

% nan CTD
notnans = find(~isnan(ctd.tempCorrected));
idxChlr = find(~isnan(eco.chlor));
idxCdom = find(~isnan(eco.cdom));
idxSctr = find(~isnan(eco.scatter));

% bindata

% CTD 
[tempG, yb, ystd, nnall] = bindata2_old(ctd.tempCorrected(notnans), ...
    ctd.ptime_datenum(notnans), ctd.depth(notnans), dn_vec, z_vec);

[salinG, yb, ystd, nnall] = bindata2_old(ctd.salinCorrected(notnans), ...
    ctd.ptime_datenum(notnans), ctd.depth(notnans), dn_vec, z_vec);

[densG, yb, ystd, nnall] = bindata2_old(ctd.densCorrected(notnans), ...
    ctd.ptime_datenum(notnans), ctd.depth(notnans), dn_vec, z_vec);

% uncorrected
[tempU, yb, ystd, nnall] = bindata2_old(ctd.temp(notnans), ...
    ctd.ptime_datenum(notnans), ctd.depth(notnans), dn_vec, z_vec);

[salinU, yb, ystd, nnall] = bindata2_old(ctd.salin(notnans), ...
    ctd.ptime_datenum(notnans), ctd.depth(notnans), dn_vec, z_vec);

[densU, yb, ystd, nnall] = bindata2_old(ctd.dens(notnans), ...
    ctd.ptime_datenum(notnans), ctd.depth(notnans), dn_vec, z_vec);

% ECO

[chlorG, yb, ystd, nnall] = bindata2_old(eco.chlor(idxChlr), ...
    eco.ptime_datenum(idxChlr), eco.depth(idxChlr), dn_vec, z_vec);

[cdomG, yb, ystd, nnall] = bindata2_old(eco.cdom(idxCdom), ...
    eco.ptime_datenum(idxCdom), eco.depth(idxCdom), dn_vec, z_vec);

[scatterG, yb, ystd, nnall] = bindata2_old(eco.scatter(idxSctr), ...
    eco.ptime_datenum(idxSctr), eco.depth(idxSctr), dn_vec, z_vec);



% grid
[dn, z] = meshgrid(dn_mean, z_mean);


% % test figure ? 
% 
% cs = {tempG', salinG', densG'};  % Transpose and store in cell array
% tt = {'Temperature', 'Salinity', 'Density'};  % Cell array of titles
% 
% for i = 1:length(cs)
%     figure;
%     pcolor(dn, z, cs{i});
%     shading interp;
%     colorbar;
%     set(gca, 'ydir', 'reverse');
%     datetick('x', 'keeplimits');
%     title(sprintf('Salacia September 2021 %s', tt{i}));
%     xlabel('Time');
%     ylabel('Depth (m)');
% end

figure;
pcolor(dn, z, chlorG');
shading interp;
colorbar;
set(gca, 'ydir', 'reverse');
datetick('x', 'keeplimits');
title('Angus September 2021');
xlabel('Time');
ylabel('Depth (m)');

ofn = fullfile(outdir, sprintf('%s_%s_L2.mat', ctd.config.glider_name, ctd.config.date_tag));

units = struct('dn', 'serial days',...
               'dz', 'm',...
               'tempG', 'deg C',...
               'salinG', 'psu',...
               'densG', 'kg m-3', ...
               'tempU', 'deg C',...
               'salinU', 'psu',...
               'densU', 'kg m-3',...
               'chlorG', '10e-6 g/l',...
               'cdomG', 'ppb',...
               'scatterG', '1/mm');

variable_description = struct('dn', 'serial days gridded', ...
                              'dz', 'depth gridded',...
                              'tempG', 'L1 temperature gridded', ...
                              'salinG', 'L1 salinity gridded', ...
                              'densG', 'L1 density gridded', ...
                              'tempU', 'uncorrected temperature gridded', ...
                              'salinU', 'uncorrected  salinity gridded', ...
                              'densU', 'uncorrected density gridded', ...
                              'chlorG', 'chlorophyll gridded', ...
                              'cdomG', 'colored dissolved organic matter gridded', ...
                              'scatterG', 'optical backscatter gridded');

config = struct('glider_name', ctd.config.glider_name, ...
                'gen', ctd.config.gen, ...
                'isPumped', ctd.config.isPumped, ...
                'date_tag', dateTag, ... 
                'start_date', ctd.config.start_date, ...
                'end_date', ctd.config.end_date, ...
                'var_description', variable_description, ...
                'var_units', units, ...
                'thermal_params', ctd.config.thermal_params, ...
                'stall_index', ctd.config.stall_index, ...
                'zmax', zmax);

save(ofn,...
    'config',...
     'dn',...
     'dz',...
     'tempG',...
     'salinG',...
     'densG',...
     'tempU', ...
     'salinU', ...
     'densU',...
     'chlorG',...
     'cdomG', ...
     'scatterG');